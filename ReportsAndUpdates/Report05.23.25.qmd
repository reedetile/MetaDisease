---
title: "Report05.03.2025"
author: "Reed Scott"
format: docx
editor: visual
bibliography: references.bib
---

```{r Init, echo=FALSE, message=FALSE}
library(vegan)
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(patchwork)
set.seed(1234)
```

# Introduction

In the last update on this project we had agreed upon a method for simulating the species richness \~ abundance relationship when building our metacommunities. I have simulated 100 meta-communities for us to explore using the rules and parameters we have previously established

In the most recent addition to our manuscript (Metadisease1.3, sent in the same email as this document) I define T and $\Sigma$ (called R and B Mark's 2020 supplementals). To start, here I provide the code necessary to calculate the T and $\Sigma$ matrices. I then show how I believe these functions should be used in our simulated metacommunities to calculate R~0,L~ . My goal is that, assuming you approve of these methods, we can run simulation, calculate R~0L~ for each metacommunity and explore the results.

# The Functions:

## The R (or T) matrix

To build the R matrix, we require 5 pieces of information: $\beta$, I, N, S, and P. S defines the number of possible species in the system and P defines the number of patches in the system. $\beta$ is an S x S matrix define transmission rates: $\beta_{ss}$ is intraspecific transmission while $\beta_{si}$ is interspecific transmission. I is an S x P matrix defining the abundance of infectious individuals in each patch. N is also an S x P matrix, but defines the total abundance of each species in each patch. Based on the method of calculating T and T~P~ we can calculate R using the following code:

```{r Def build R}
build_R_with_data_freq <- function(beta,I,N,S,P) {
  fullR <- matrix(data = 0, nrow = P*S, ncol = P*S)
  for (p in 1:P) {
    Rmat <- matrix(data = 0, nrow = S, ncol = S)
    for (s in 1:S){
      for (i in 1:S){
        Rmat[i,s] <- (beta[s,i]*I[p,i])/sum(N[p,])
      }
    }
    start <- ifelse(p == 1, p,(S*p)-(S-1))
    stop <- start + S - 1
    fullR[start:stop, start:stop] <- Rmat
  }
  return(fullR)
}
```

Here, we are defining the full matrix R, ofr"fullR" as a matrix with dimensions {P\*S,P\*S}. We then define a submatrix Rmat, for each patch, where $Rmat_{i,s} = (\beta_{i,s}*I_{p,i})/\sum(N_s)$ where $\beta_{i,s}$ is the transmission coefficient between infectious individuals of species i and susceptible individuals of species s.

## The B (or $\Sigma$ matrix)

While the R matrix had to change its calculations compared to Wilber 2020, the B matrix remains largely unchanged. In the Metadisease1.3 we define 2 submatrices of the B matrix, D and E (originally defined in Mark's 2020 supplementals). In addition to parameters S and P we also define the B matrix using Cmat (the matrix of connectivity between patches), $\phi$ (the dispersal rate of a species), and b (the loss rate of the disease, defined by recovery + death).

```{r Def build B}
build_B_with_data <- function(Cmat, phi, b, S, P) {
  Cmat_axis <- colSums(Cmat)
  diag_list <- vector("list",P^2)
  diag_list_names <- array(dim = c(sqrt(length(diag_list)), sqrt(length(diag_list))))
  for (p in 1:P) { #loop over columns
    for (j in 1:P) { #loop over rows
      diag_list_names[j,p] <- paste(p,j,sep="_")
    }
  }
  diag_list_names <- as.vector(diag_list_names)
  names(diag_list) <- diag_list_names
  for (p in 1:P) { #loop over columns
    for (j in 1:P) { #loop over rows
      tZ <- matrix(0,nrow = S, ncol = S)
      new_diag <- array(dim = S)
      new_diag <- if(p == j){
        #build the diagonal matrix
        (-1)*b - phi*Cmat_axis[p]
      } else{
        phi*Cmat[j,p]
      }
      diag(tZ) <- new_diag
      x <- paste(p,j,sep="_")
      diag_list[[x]] <- tZ 
    }
  }
  diag_matrix <- matrix(diag_list, nrow = P, ncol = P)
  tB <- list()
  for (j in 1:P) {
    tB[[j]] <- matrix(data = unlist(diag_matrix[j,]), nrow = S*P, ncol = S, byrow = T) #looks like this worked!
  }
  
  B <- do.call(cbind, tB[1:P]) #need to determine if this is what B should look like
  return(B) 
}
```

I'd say the most important thing to pay attention to is the if...else statement. If p = j, then we are along the diagonal of the matrix and thus use the formula $(-1)b - \phi*CmatAxis[p]$ . If we are off the diagonal we use the formula $\phi * Cmat$.

## The K matrix

The final product we need to calculate R~0,L~ is the matrix K. this is defined by

$$
K = max eig (R*-B^{-1})
$$

We already have the process for defining R and B. Now we just need to use matrix multiplication to get K.

```{r Def K}
landscape_R0_freq <- function(beta,I,N,Cmat,b, phi,S,P){
  R <- build_R_with_data_freq(beta = beta,
                         I = I,
                         N = N,
                         S = S,
                         P = P)
  B <- build_B_with_data(Cmat = Cmat,
                         phi = phi,
                         b = b,
                         S = S,
                         P = P)
  K <- R %*% solve(-1*B)
  return(list(K = K, R = R, B = B))
}
```

## An example

Let's take an example and see if it works as expected. We'll define a 2 species, 2 patch system. We'll randomly define values for b, $\phi$, $\beta$, and N. We'll define S (abundance of susceptible individuals) as a proportion of N and I = N-S. With all of that defined we can then run each function and see if they work.

```{r}
Spp <- 2 #number of species
Patches <- 2 #number of patches
b <- rnorm(n = Spp, mean = 1, sd = 0.1)
phi <- rnorm(n = 2, mean = 0.5, sd = 0.1)
#transmission
beta <- matrix(data = NA, nrow = Spp, ncol = Spp)
for (i in 1:nrow(beta)) {
  for (j in 1:ncol(beta)) {
    beta[i,j] <- ifelse(i == j, rbeta(n = 1, shape1 = 2, shape2 = 10),rbeta(n = 1, shape1 = 1, shape2 = 1))
  }
}
#connectivity
Cmat <- matrix(data = rnorm(n = Patches^2, mean = 0.5, sd = 0.1),
            nrow = Patches,
            ncol = Patches)
N <- matrix(rep(NA,4), nrow = 2, ncol = 2)
N[,1] <- runif(2, min = 10, max = 20)
for(i in 1:2){
  N[i,2] <- runif(1, min = 1, max = N[i,1])
}
S <- N*c(0.8,0.95)
I <- N - S
r_freq <- build_R_with_data_freq(beta = beta,
                                 I = I,
                                 N = N,
                                 S = Spp,
                                 P = Patches)
B <- build_B_with_data(Cmat = Cmat,
                       phi = phi,
                       b = b, 
                       S = Spp,
                       P = Patches)
# Not currently working. Need to probably adjust B matrix
K_freq <- landscape_R0_freq(beta = beta,
                            I = I,
                            N = N,
                            Cmat = Cmat,
                            b = b,
                            phi = phi,
                            S = Spp,
                            P = Patches)
```

Now let's check each and see if they worked:

```{r matrices}
r_freq
B
K_freq[[1]]
```

Looks like about what I'd expect! And if we take the max eigenvalue of that, that should be our R~0,L~

# Applying functions to our metacommunities

Our goal in this project is to assess how **dissimilarity of communities** affects R~0,L~. Previously, we have talked about how to simulate community structure so I'm not going to discuss it much here. You can see the methods section of Metadisease1.3, "Establishing meta-communities" and Figure 1 to see that this uses a saturated curve.

Here, I provide the methods in terms of the code. I am using I am using a two patch meta-community to start, although I think this can be upscaled relatively easily. We have to set the number of patches (2), number of species (6), birth (0 because this is a single season model), death (d), recovery (v), $\phi$ (dispersal), $\beta$ (transmission coefficient), and c(connectivity). I do not show the code here but am happy to continue discussion of parameter value selection.

```{r Create params, echo=FALSE, message=FALSE, results='hide'}
# Global variables----------------------------------
meta_comm_list <- readRDS("metacomm_2Patch.RDS")
num_patches <- 2
num_spp <- 6
time <- 90 #how many "days" do I want in the season

### Species Characteristics
#species characteristics
Species <- c("PREG","TGRAN","TTOR","ABOR","RCAT","RDRAY")
# PREG = Pseudacris Regilla (Pacific tree frog)
# ABOR = Anaxyrus boreas (western toad)
# RCAT = Rana catesbeiana (American bullfrog)
# RDRAY = Rana draytonii (Califronia red legged frog)
# TTOR = Taricha torosa (California newt)
# TGRAN = Taricha granulosa (rough-skinned newt)

birth <- rep(0, times = 6) #currently have birth rate set to 0 b/c this is a within season model
# if we change to a multi-season model, will need to add in some birth rate
# b <- c(0.6,0.5,0.4,0.3,0.2,0.1)/time #host birth rate
d <- c(0.006,
       NA,
       NA,
       0.0007,
       0.004,
       0.0099)
d[2] <- runif(n = 1, min = d[[4]], max = d[[1]])       
d[3] <- runif(n = 1, min = d[[4]], max = d[[2]])       
# Citations for death rate
# PREG = Jameson 1956
# ABOR = Pilliod 2010
# RCAT = Howell 2020
# RDRAY = Feller 2017
# TTOR = johnson 2013 + assumptions of dilution effects
# TGRAN =  johnson 2013 + assumptions of dilution effects
v <- c(NA,
       NA,
       NA,
       NA,
       0.003086911,
       NA)
# Citation for RCAT recovery = Daszak 2004
low_recovery <- runif(n = 4, min = 0, max = v[5])
v[1] <- min(low_recovery)
v[4] <- max(low_recovery)
mid_low_recovery <- low_recovery[low_recovery != v[1] & low_recovery != v[4]]
v[2] <- min(mid_low_recovery)
v[3] <- max(mid_low_recovery)
v[6] <- runif(n = 1, min = v[5], max = 0.1) #should find citation for max recovery rate
v
#Determining dispersal rate
phi <- runif(6) # need to check simulation for determining if diserpsal matters
# alpha <- #disease specific mortality
species_chara <- data.frame(Species = Species,
                            birth = birth, 
                            death = d, 
                            recovery = v, 
                            dispersal = phi)
#connectivity
stay <- rbeta(n = 1, shape1 = 4, shape2 = 2) #probability individuals stay in a patch?
go <- rbeta(n = 1, shape1 = 1.5, shape2 = 3.5) # probability individuals move
c <- matrix(data = NA,
            nrow = num_patches, 
            ncol = num_patches)
for(i in 1:ncol(c)){
  for(j in 1:nrow(c)){
    c[i,j] <- ifelse(i == j, stay, go)
  }
}
```

I do want to take a second to discuss the simulation of $\beta$. Originally, I had defined both intraspecific and interspecific $\beta$ using the beta distribution. however, when I did, I found that the values of interspecific $\beta$ were incredibly small. This could easily be adjusted, and for now I have arbitrarily defined interspecific $\beta$ as 0.85\*intraspecific $\beta$. However, I think this could showcase how important the specifications for $\beta$ are (and that I may need to do a bit more literature review).

```{r Tranmission}
trans_rate <- function(n = 1,x = seq(0,1,length = 100),a,b){
  trans <- rbeta(n = n, shape1 = a, shape2 = b)
  return(trans)
}


# PREG
intra_PREG <- trans_rate(a = 4,b = 2)
inter_PREG <- intra_PREG*0.85 #trans_rate(a = 4, b = 2.5)

# TGRAN
intra_TGRAN <- trans_rate(a = 4, b = 2.25)
inter_TGRAN <- intra_TGRAN*0.85 #trans_rate(a = 4, b = 2.5)

#TTOR
intra_TTOR <- trans_rate(a = 3, b = 2.5)
inter_TTOR <- intra_TTOR*0.85 #trans_rate(a = 3, b = 2.75)

#ABOR
intra_ABOR <- trans_rate(a = 2.5, b = 2.75)
inter_ABOR <- intra_ABOR*0.85 #trans_rate(a = 2.5, b = 3.0)

#RCAT
intra_RCAT <- trans_rate(a = 2.0, b = 3.0)
inter_RCAT <- intra_RCAT*0.85 #trans_rate(a = 2.0, b = 3.25)

#RDRAY
intra_RDRAY <- trans_rate(a = 1.5, b = 3.25)
inter_RDRAY <- intra_RDRAY*0.85#trans_rate(a = 1.5, b = 3.5)

beta <- matrix(data = NA, nrow = num_spp, ncol = num_spp)
for (i in 1:nrow(beta)) {
  for (j in 1:ncol(beta)) {
    beta[i,j] <- if(i == 1 & j == 1){
      intra_PREG}else if(i != 1 & j == 1){
        inter_PREG} else if(i == 2 & j == 2){
          intra_TGRAN} else if(i != 2 & j == 2){
            inter_TGRAN} else if(i == 3 & j == 3){
              intra_TTOR} else if(i != 3 & j == 3){
                inter_TTOR} else if(i == 4 & j == 4){
                  intra_ABOR} else if(i != 4 & j == 4){
                    inter_ABOR} else if(i == 5 & j == 5){
                      intra_RCAT} else if(i != 5 & j ==5){
                        inter_RCAT} else if(i == 6 & j == 6){
                          intra_RDRAY} else if(i != 6 & j == 6){
                            inter_RDRAY}
  }
}
```

Now with that in mind I can show the for loops used to actually calculate R~0,L~ . I first defined a dataframe that we will use to store our results. I then ran a for loop where for each metacommunity "a" we established the total (N) susceptible (S) Infectious (I) abundance for each species. We can calculate total abundance for each metacommunity (TotalAbundance) as well as the abundance of each species. We can then measure **dissimilarity** of the two patches within the metacommunity (which I call beta_diversity... that may not be correct). I also measure gamma diversity for good measure. With all of this, we then have the necessary variables to calculate R~0,L~ using the landscape_R0_freq() function. And I believe... that's everything required. That should be the whole model.

```{r Sim to calc R0}
result <- data.frame(matrix(data = NA, nrow = length(meta_comm_list), ncol = 17))
colnames(result) <- c("TotalAbundance","PREG","TGRAN","TTOR","ABOR","RCAT","RDRAY","BetaDiversity","Gamma_diversity","LandscapeR0", "MetaCommID")

for (a in 1:length(meta_comm_list)) {
  S <- meta_comm_list[[a]][,1:6]*c(0.5,0.6,0.70,0.8,0.80,.9) #value of susceptibles
  I <- meta_comm_list[[a]][,1:6] - S #value of infecteds
  N <- S+I #total pop of a patch
  S <- as.matrix(S)
  I <- as.matrix(I)
  N <- as.matrix(N)
  N_meta <- colSums(N)
  b <- v + d  # total loss rate

  # Calculate variables
  result[a,1] <- sum(N) #total abundance
  #abdunance of each species
  for (i in 2:(1+num_spp)) {
    result[a,i] <- sum(N[,i-1])
    result[a,(i+num_spp)] <- result[a,i]/result[a,1]
  }
  
  #add beta diversity
  beta_diversity <- betadiver(N, method = 'sor')
  result[a,14] <- mean(beta_diversity, na.rm =T) #beta diversity
  result[a,15] <- sum(ifelse(result[a,1:6] > 0, 1,0)) #gamma diversity
  
  #calculate landscape R0
  r0_landscape <- landscape_R0_freq(beta = beta,
                                    I = I,
                                    N = N,
                                    Cmat = c,
                                    b = b,
                                    phi = phi,
                                    S = num_spp,
                                    P = num_patches)
  
  result[a,16] <- max(abs(eigen(r0_landscape[[1]])$values)) #landscape R0
  result[a,17] <- a #metacommunity ID
}
```

# Next steps

First, I believe that I need to reassess how $\beta$ transmission is determined. Although I don't show it here, I redid some of the sensitivity analysis I did earlier and found that R~0,L~ is strongly correlated with $\beta$. As I said above, this could include some further literature review.

Additionally, my chosen values for S and I are currently arbitrary. I think we're far enough along that I need to do some digging to determine realistic values of prevalence for each host species. I also think that this has led to a change in an underlying question you both asked earlier: I think that this is going to be a simulation assessing a system at equilibrium and not necessarily exploring invasion dynamics.

Now, assuming my math is correct, and that my implementation via code is correct, I believe that the next step is analysis of the model. We could just use a GLM. Although @mihaljevic2014 used a GAM I'm not sure we're expecting any non-linear relationship so not sure that's a good fit? I am open to either though. And I think we could fit 3 models:

1.  a null model
2.  $R_{0,L}$ ~ $\beta$ and
3.  $R_{0,L}$ ~ $\gamma$

and see how the models perform. I think it would also make sense to include graphs of $R_{0,L}$ \~ $\beta$ and $R_{0,L}$ \~ $\gamma$.
